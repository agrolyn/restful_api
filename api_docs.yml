swagger: "2.0"
info:
  title: "API Documentation"
  version: "1.0"
  description: "API Documentation For AGROLYN Apps."

tags:
  - name: "authentication"
    description: "Endpoints related to authentication and authorization"
  - name: "article"
    description: "Endpoints related to articles"
  - name: "recipe"
    description: "Endpoints related to recipes"
  - name: "profile"
    description: "Endpoints related to user profile"
  - name: "community"
    description: "Endpoints related to community"
  - name: "e-commerce"
    description: "Endpoints related to e-commerce"
  - name: "video education"
    description: "Endpoints related to video education"
  - name: "AI plant disease detection"
    description: "Endpoints related to AI plant disease detection"

paths:
  /refresh-token/:
    post:
      tags:
        - "authentication"
      summary: "Obtain a new access token using refresh token"
      description: "Use this endpoint to get a new access token without logging in again. Requires a valid refresh token in the Authorization header."
      parameters:
        - in: header
          name: Authorization
          required: true
          description: "Bearer token format with the refresh token (e.g., 'Bearer <refresh_token>')"
          schema:
            type: string
      responses:
        200:
          description: "Successfully obtained new access token"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "New JWT access token for authenticated requests"
        401:
          description: "Invalid or expired refresh token"
        422:
          description: "Missing or invalid Authorization header format"

  /register/:
    post:
      tags:
        - "authentication"
      summary: "Register a new user"
      consumes:
        - application/json
      parameters:
        - in: body
          name: user
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
              address:
                type: string
              phone_number:
                type: string
              password:
                type: string
              roles_id:
                type: integer
      responses:
        201:
          description: "User registered successfully. Check email to confirm account."
        400:
          description: "Email already exists"

  /confirm/{token}/:
    get:
      tags:
        - "authentication"
      summary: "Confirm user's email"
      parameters:
        - name: token
          in: path
          required: true
          type: string
          description: "The confirmation token sent via email"
      responses:
        200:
          description: "Email verified successfully"
        400:
          description: "Invalid or expired confirmation link"

  /login/:
    post:
      tags:
        - "authentication"
      summary: "Login user and obtain JWT tokens (access and refresh)"
      consumes:
        - application/json
      parameters:
        - in: body
          name: credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                description: "User's email address"
              password:
                type: string
                description: "User's password"
      responses:
        200:
          description: "Logged in successfully with access and refresh tokens provided"
          schema:
            type: object
            properties:
              access_token:
                type: string
                description: "JWT access token for authenticated requests"
              refresh_token:
                type: string
                description: "JWT refresh token for obtaining new access tokens"
              id:
                type: integer
                description: "User's unique ID"
              email:
                type: string
                description: "User's email address"
              name:
                type: string
                description: "User's name"
              address:
                type: string
                description: "User's address"
              phone_number:
                type: string
                description: "User's phone number"
              img_profile:
                type: string
                description: "URL to user's profile image"
              roles_id:
                type: integer
                description: "User's role ID"
        401:
          description: "Invalid credentials"
        403:
          description: "Email not verified"

  /forgot_password/:
    post:
      tags:
        - "authentication"
      summary: "Request password reset link"
      consumes:
        - application/json
      parameters:
        - in: body
          name: email
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        200:
          description: "Password reset email sent"
        404:
          description: "Email not found"

  /reset_password/{token}/:
    get:
      tags:
        - "authentication"
      summary: "Confirm user's email reset password"
      parameters:
        - name: token
          in: path
          required: true
          type: string
          description: "The confirmation token reset password sent via email"
      responses:
        200:
          description: "Email reset password verified successfully"
        400:
          description: "Invalid or expired confirmation link"
    post:
      tags:
        - "authentication"
      summary: "Reset user password"
      consumes:
        - application/json
      parameters:
        - name: token
          in: path
          required: true
          type: string
          description: "The reset token sent via email"
        - in: body
          name: password
          required: true
          schema:
            type: object
            properties:
              new_password:
                type: string
      responses:
        200:
          description: "Password reset successfully"
        400:
          description: "Invalid or expired reset link"
        404:
          description: "User not found"

  /logout/:
    post:
      tags:
        - "authentication"
      summary: "Logout user and invalidate session"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
      responses:
        200:
          description: "Logged out successfully"

  /articles/:
    get:
      tags:
        - "article"
      summary: "Get all articles"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "A list of articles."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The article ID."
                title:
                  type: string
                  description: "The title of the article."
                thumbnail:
                  type: string
                  description: "URL of the article thumbnail."
                description:
                  type: string
                  description: "A brief description of the article."
                location:
                  type: string
                  description: "The location related to the article."
                released_date:
                  type: string
                  format: date
                  description: "The release date of the article."
        404:
          description: "No articles found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Tidak ada artikel tersedia."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data artikel."
              error:
                type: string
                example: "Database connection failed."

  /articles/{id}/:
    get:
      tags:
        - "article"
      summary: "Get article detail"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: id
          in: path
          required: true
          type: integer
          description: "The ID of the article to retrieve."
      responses:
        200:
          description: "Article details."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "The article ID."
              title:
                type: string
                description: "The title of the article."
              thumbnail:
                type: string
                description: "URL of the article thumbnail."
              description:
                type: string
                description: "A brief description of the article."
              location:
                type: string
                description: "The location related to the article."
              released_date:
                type: string
                format: date
                description: "The release date of the article."
        404:
          description: "Article not found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Artikel tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data artikel."
              error:
                type: string
                example: "Database connection failed."

  /recipes/:
    get:
      tags:
        - "recipe"
      summary: "Get all recipes"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "A list of recipes."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The recipe ID."
                title:
                  type: string
                  description: "The title of the recipe."
                description:
                  type: string
                  description: "The description of the recipe."
                calories:
                  type: string
                  description: "The calories of the recipe."
                protein:
                  type: string
                  description: "The protein of the recipe."
                karbo:
                  type: string
                  description: "The karbo of the recipe."
                img_recipe:
                  type: string
                  description: "URL of the recipe image."
                ingredients:
                  type: string
                  description: "The ingredients needed for the recipe."
                steps:
                  type: string
                  description: "The instructions for preparing the recipe."
        404:
          description: "No recipes found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Tidak ada resep tersedia."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data resep."
              error:
                type: string
                example: "Database connection failed."

  /recipes/{id}/:
    get:
      tags:
        - "recipe"
      summary: "Get recipe detail"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: id
          in: path
          required: true
          type: integer
          description: "The ID of the recipe to retrieve."
      responses:
        200:
          description: "Recipe details."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "The recipe ID."
              title:
                type: string
                description: "The title of the recipe."
              description:
                type: string
                description: "The description of the recipe."
              calories:
                type: string
                description: "The calories of the recipe."
              protein:
                type: string
                description: "The protein of the recipe."
              karbo:
                type: string
                description: "The karbo of the recipe."
              img_recipe:
                type: string
                description: "URL of the recipe image."
              ingredients:
                type: string
                description: "The ingredients needed for the recipe."
              steps:
                type: string
                description: "The instructions for preparing the recipe."
        404:
          description: "Recipe not found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resep tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data resep."
              error:
                type: string
                example: "Database connection failed."

  /edit-profile/:
    put:
      tags:
        - "profile"
      summary: "Edit user profile"
      description: "Endpoint for updating user's profile information."
      consumes:
        - application/json
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
        - in: body
          name: profile
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: "User's updated name"
              address:
                type: string
                description: "User's updated address"
              phone_number:
                type: string
                description: "User's updated phone number"
      responses:
        200:
          description: "Profile updated successfully"
        400:
          description: "No valid fields to update"
        404:
          description: "User not found"
        401:
          description: "Unauthorized access"
  /community/questions/:
    get:
      tags:
        - "community"
      summary: "Get all community questions"
      description: "Retrieve all questions from the community, including user details and metadata. Requires a valid JWT token."
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
      responses:
        200:
          description: "A list of community questions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Status message"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "The ID of the question"
                        username:
                          type: string
                          description: "The name of the user who posted the question"
                        user_profile:
                          type: string
                          description: "URL of the user's profile picture"
                        question_type:
                          type: string
                          description: "The type of the plant related to the question"
                        title_question:
                          type: string
                          description: "The title of the question"
                        like_num:
                          type: integer
                          description: "Number of likes the question has received"
                        question_thumbnail:
                          type: string
                          description: "URL of the question's thumbnail image"
                        number_of_answer:
                          type: integer
                          description: "Number of answers for the question"
                        released_date:
                          type: string
                          format: date-time
                          description: "The release date of the question"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message indicating authorization failure"
        500:
          description: "An error occurred while fetching questions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
                  error:
                    type: string
                    description: "Details about the error"
  /community/questions/{id}/:
    get:
      tags:
        - "community"
      summary: "Get details of a specific question"
      description: "Retrieve detailed information about a specific community question and its answers. Requires a valid JWT token."
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: "The ID of the question to retrieve"
      responses:
        200:
          description: "Details of the question and its answers"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Status message"
                  data:
                    type: object
                    properties:
                      question_detail:
                        type: object
                        properties:
                          id:
                            type: integer
                            description: "The ID of the question"
                          username:
                            type: string
                            description: "The name of the user who posted the question"
                          user_profile:
                            type: string
                            description: "URL of the user's profile picture"
                          question_type:
                            type: string
                            description: "The type of the plant related to the question"
                          title_question:
                            type: string
                            description: "The title of the question"
                          description:
                            type: string
                            description: "The content of the question"
                          like_num:
                            type: integer
                            description: "Number of likes the question has received"
                          question_thumbnail:
                            type: string
                            description: "URL of the question's thumbnail image"
                          number_of_answer:
                            type: integer
                            description: "Number of answers for the question"
                          released_date:
                            type: string
                            format: date-time
                            description: "The release date of the question"
                      list_answer:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: "The ID of the answer"
                            username:
                              type: string
                              description: "The name of the user who posted the answer"
                            user_profile:
                              type: string
                              description: "URL of the user's profile picture"
                            answer:
                              type: string
                              description: "The content of the answer"
                            like_num:
                              type: integer
                              description: "Number of likes the answer has received"
                            released_date:
                              type: string
                              format: date-time
                              description: "The release date of the answer"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message indicating authorization failure"
        404:
          description: "The question with the specified ID was not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"

  /community/questions/filters/{filter_name}/:
    get:
      tags:
        - "community"
      summary: "Get filtered community questions"
      description: >
        Retrieve community questions based on specific filters. 
        Supports filters such as:
        - `"umum"`: General questions
        - `"padi"`: Rice-related questions
        - `"jagung"`: Corn-related questions
        - `"answerme"`: Questions asked by the logged-in user.
        Requires a valid JWT token.
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
        - name: filter_name
          in: path
          required: true
          schema:
            type: string
            enum:
              - umum
              - padi
              - jagung
              - answerme
          description: >
            The name of the filter to apply:
            - `umum`: General questions
            - `padi`: Rice-related questions
            - `jagung`: Corn-related questions
            - `answerme`: Questions asked by the logged-in user.
      responses:
        200:
          description: "Filtered community questions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Status message"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "The ID of the question"
                        username:
                          type: string
                          description: "The name of the user who posted the question"
                        user_profile:
                          type: string
                          description: "URL of the user's profile picture"
                        question_type:
                          type: string
                          description: "The type of the plant related to the question"
                        title_question:
                          type: string
                          description: "The title of the question"
                        like_num:
                          type: integer
                          description: "Number of likes the question has received"
                        question_thumbnail:
                          type: string
                          description: "URL of the question's thumbnail image"
                        number_of_answer:
                          type: integer
                          description: "Number of answers for the question"
                        released_date:
                          type: string
                          format: date-time
                          description: "The release date of the question"
        401:
          description: "Unauthorized - Invalid or missing JWT token"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message indicating authorization failure"
        500:
          description: "An error occurred while fetching filtered questions"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "Error message"
                  error:
                    type: string
                    description: "Details about the error"

  /community/questions/search/:
    get:
      tags:
        - "community"
      summary: "Search community questions"
      description: "Search for community questions based on a query keyword. Requires a valid JWT token."
      parameters:
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
        - name: query
          in: query
          required: true
          schema:
            type: string
          description: "The keyword to search for in community questions"
      responses:
        200:
          description: "A list of community questions matching the search query"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "Response status"
                  message:
                    type: string
                    description: "Status message"
                    example: "Sukses menemukan 2 pertanyaan komunitas berdasarkan pencarian"
                  data:
                    type: array
                    description: "List of matching questions"
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: "The ID of the question"
                        title_q:
                          type: string
                          description: "The title of the question"
                        description:
                          type: string
                          description: "The detailed description of the question"
                        created_at:
                          type: string
                          format: date-time
                          description: "The date and time when the question was created"
                        updated_at:
                          type: string
                          format: date-time
                          description: "The date and time when the question was last updated"
        400:
          description: "Invalid query parameter"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "Response status"
                    example: "error"
                  message:
                    type: string
                    description: "Error message"
                    example: "Parameter query tidak boleh kosong"
        404:
          description: "No matching questions found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "Response status"
                    example: "error"
                  message:
                    type: string
                    description: "Error message"
                    example: "Pertanyaan tidak ditemukan"
        500:
          description: "An error occurred while processing the request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "Response status"
                    example: "error"
                  message:
                    type: string
                    description: "Error message"
                    example: "Kesalahan saat mencari pertanyaan komunitas"
                  error:
                    type: string
                    description: "Details about the error"

  /community/questions/{id}/like/:
    post:
      tags:
        - "community"
      summary: "Like community questions"
      description: "Adds like count to community questions based on question ID."
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the community question you want to like."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Berhasil menyukai pertanyaan komunitas."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menyukai (like) pertanyaan komunitas."
        400:
          description: "Pertanyaan tidak ditemukan."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal menyukai (like) pertanyaan komunitas."
        500:
          description: "Kesalahan server internal."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error terjadi"
              error:
                type: string
                example: "Database connection failed."

  /community/questions/{id}/dislike/:
    post:
      tags:
        - "community"
      summary: "Dislike community questions"
      description: "Reduced the number of likes on community questions based on the question ID."
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the community question you want to dislike."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Berhasil tidak menyukai pertanyaan komunitas."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses tidak menyukai (dislike) pertanyaan komunitas."
        400:
          description: "Pertanyaan tidak ditemukan atau like bernilai 0."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal tidak menyukai (dislike) pertanyaan komunitas."
        500:
          description: "Kesalahan server internal."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error terjadi"
              error:
                type: string
                example: "Database connection failed."

  /community/answer/{id}/like/:
    post:
      tags:
        - "community"
      summary: "Like community answers"
      description: "Adds like count to community answers based on answer ID."
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the community answer you want to like."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Berhasil menyukai jawaban komunitas."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menyukai (like) jawaban dari pertanyaan komunitas."
        400:
          description: "Jawaban tidak ditemukan."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal menyukai (like) jawaban dari pertanyaan komunitas."
        500:
          description: "Kesalahan server internal."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error terjadi"
              error:
                type: string
                example: "Database connection failed."

  /community/answer/{id}/dislike/:
    post:
      tags:
        - "community"
      summary: "Dislike community answers"
      description: "Reduce the number of likes on community answers based on the answer ID."
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          description: "ID of the community answer you want to dislike."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Berhasil tidak menyukai jawaban komunitas."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses tidak menyukai (dislike) jawaban dari pertanyaan komunitas."
        400:
          description: "Jawaban tidak ditemukan atau like bernilai 0."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal tidak menyukai (dislike) jawaban dari pertanyaan komunitas."
        500:
          description: "Kesalahan server internal."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Error terjadi"
              error:
                type: string
                example: "Database connection failed."
      
  /community/question/new/:
    post:
      tags:
        - "community"
      summary: "Add a new community question"
      description: "Submit a new question to the community with optional image upload. Requires a valid JWT token."
      consumes:
        - multipart/form-data
      parameters:
        - name: title_q
          in: formData
          type: string
          required: true
          description: "The title of the question"
          example: "How to grow tomatoes?"
        - name: description
          in: formData
          type: string
          required: true
          description: "Details or description of the question"
          example: "I need advice on growing tomatoes in a tropical climate."
        - name: plant_types_id
          in: formData
          type: integer
          required: true
          enum:
            - 1
            - 2
            - 3
          description: "The ID of the plant type related to the question. Options: 1 = padi, 2 = jagung, 3 = umum."
          example: 1
        - name: img_q
          in: formData
          type: file
          required: false
          description: "An optional image file for the question"
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')"
      responses:
        201:
          description: "Question successfully added"
          schema:
            type: object
            properties:
              message:
                type: string
                description: "Success message"
              new_question:
                type: object
                properties:
                  id:
                    type: integer
                    description: "The ID of the newly created question"
                  title_q:
                    type: string
                    description: "The title of the question"
                  description:
                    type: string
                    description: "Details of the question"
                  img_q:
                    type: string
                    description: "URL of the uploaded image for the question"
                  released_date:
                    type: string
                    format: date-time
                    description: "The release date of the question"
        400:
          description: "Bad request - Missing required data or image not found"
        500:
          description: "Internal server error"

  /community/question/update/{question_id}/:
    put:
      tags:
        - "community"
      summary: "Update a community question"
      description: "Update an existing question in the community. You can also update the associated image."
      consumes:
        - multipart/form-data
      parameters:
        - name: question_id
          in: path
          required: true
          type: integer
          description: "ID of the community question you want to update."
        - name: title_q
          in: formData
          type: string
          required: false
          description: "Updated title of the question"
          example: "How to grow tomatoes in the wild?"
        - name: description
          in: formData
          type: string
          required: false
          description: "Updated details or description of the question"
          example: "I need advice on growing tomatoes in harsh conditions."
        - name: plant_types_id
          in: formData
          type: integer
          required: false
          enum:
            - 1
            - 2
            - 3
          description: "Updated ID of the plant type related to the question. Options: 1 = padi, 2 = jagung, 3 = umum."
          example: 2
        - name: img_q
          in: formData
          type: file
          required: false
          description: "An optional updated image file for the question"
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        201:
          description: "Successfully updated the community question."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses memperbarui data pertanyaan komunitas."
              updated_question:
                type: object
                properties:
                  id:
                    type: integer
                    description: "The ID of the updated question"
                  title_q:
                    type: string
                    description: "The updated title of the question"
                  description:
                    type: string
                    description: "Updated details of the question"
                  img_q:
                    type: string
                    description: "URL of the updated image for the question"
                  released_date:
                    type: string
                    format: date-time
                    description: "The release date of the question"
        400:
          description: "Bad request - Missing required data or invalid input"
        404:
          description: "Question not found"
        500:
          description: "Internal server error"
  
  /community/question/delete/{question_id}/:
    delete:
      tags:
        - "community"
      summary: "Delete a community question"
      description: "Delete a community question by its ID, along with its associated image."
      parameters:
        - name: question_id
          in: path
          required: true
          type: integer
          description: "ID of the community question you want to delete."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Successfully deleted the community question and its associated image."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menghapus pertanyaan beserta gambarnya."
        404:
          description: "Question not found"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Pertanyaan tidak ditemukan."
        500:
          description: "Internal server error"
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan server internal."
              error:
                type: string
                example: "Error: Unable to delete the question."

  /community/answer/new/{question_id}/:
    post:
      tags:
        - "community"
      summary: "Add a new community answer"
      description: "Adds a new answer to a community question based on the provided question ID."
      parameters:
        - name: question_id
          in: path
          required: true
          type: integer
          description: "ID of the community question to which the answer belongs."
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              answer:
                type: string
                description: "The answer content."
                example: "This is a sample answer."
              plant_types_id:
                type: integer
                description: "ID of the plant type (if applicable)."
                example: 1
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        201:
          description: "Successfully added the answer."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses Menambahkan Jawaban Atas Pertanyaan Komunitas."
        400:
          description: "Invalid input data."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Answer atau User ID tidak boleh kosong."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Gagal menambahkan jawaban: Database error."

  /community/answer/update/{answer_id}/:
    put:
      tags:
        - "community"
      summary: "Update a community answer"
      description: "Updates an existing community answer based on the provided answer ID."
      parameters:
        - name: answer_id
          in: path
          required: true
          type: integer
          description: "ID of the community answer to update."
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              answer:
                type: string
                description: "The updated answer content."
                example: "This is the updated answer."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Successfully updated the answer."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Jawaban berhasil diperbarui."
        400:
          description: "Invalid input data."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Answer tidak boleh kosong."
        404:
          description: "Answer not found or unauthorized access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Jawaban tidak ditemukan atau Anda tidak berhak mengubahnya."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Gagal memperbarui jawaban: Database error."

  /community/answer/delete/{answer_id}/:
    delete:
      tags:
        - "community"
      summary: "Delete a community answer"
      description: "Deletes an existing community answer based on the provided answer ID."
      parameters:
        - name: answer_id
          in: path
          required: true
          type: integer
          description: "ID of the community answer to delete."
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "Successfully deleted the answer."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Jawaban berhasil dihapus."
        404:
          description: "Answer not found or unauthorized access."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Jawaban tidak ditemukan atau Anda tidak berhak menghapusnya."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Gagal menghapus jawaban: Database error."

  /ecommerce/products/:
    get:
      tags:
        - "e-commerce"
      summary: "Get all products"
      description: "Retrieve a list of all available products in the e-commerce system."
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "A list of products."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The product ID."
                product_name:
                  type: string
                  description: "The name of the product."
                desc_product:
                  type: string
                  description: "A brief description of the product."
                img_product:
                  type: string
                  description: "URL of the product image."
                price:
                  type: integer
                  description: "The price of the product."
                stock:
                  type: integer
                  description: "The stock quantity of the product."
                sold:
                  type: integer
                  description: "The number of items sold."
                users_id:
                  type: integer
                  description: "The ID of the user who added the product."
                product_categories_id:
                  type: integer
                  description: "The category ID of the product."
        404:
          description: "No products found."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Tidak ada produk tersedia."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Kesalahan saat mengambil data produk."
              error:
                type: string
                example: "Database connection failed."

  /ecommerce/products/me/:
    get:
      tags:
        - "e-commerce"
      summary: "Get user's products"
      description: "Retrieve a list of all products added by the authenticated user."
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "A list of the user's products."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The product ID."
                product_name:
                  type: string
                  description: "The name of the product."
                desc_product:
                  type: string
                  description: "A brief description of the product."
                img_product:
                  type: string
                  description: "URL of the product image."
                price:
                  type: integer
                  description: "The price of the product."
                stock:
                  type: integer
                  description: "The stock quantity of the product."
                sold:
                  type: integer
                  description: "The number of items sold."
                users_id:
                  type: integer
                  description: "The ID of the user who added the product."
                product_categories_id:
                  type: integer
                  description: "The category ID of the product."
        404:
          description: "No products found for the authenticated user."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Produk tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Kesalahan saat mengambil data produk."
              error:
                type: string
                example: "Database connection failed."

  /ecommerce/products/filters/{product_categories_id}/:
    get:
      tags:
        - "e-commerce"
      summary: "Get products by category"
      description: "Retrieve a list of products filtered by a specific category ID."
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: product_categories_id
          in: path
          required: true
          type: integer
          description: "The ID of the product category to filter by."
      responses:
        200:
          description: "A list of filtered products."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The product ID."
                product_name:
                  type: string
                  description: "The name of the product."
                desc_product:
                  type: string
                  description: "A brief description of the product."
                img_product:
                  type: string
                  description: "URL of the product image."
                price:
                  type: integer
                  description: "The price of the product."
                stock:
                  type: integer
                  description: "The stock quantity of the product."
                sold:
                  type: integer
                  description: "The number of items sold."
                users_id:
                  type: integer
                  description: "The ID of the user who added the product."
                product_categories_id:
                  type: integer
                  description: "The category ID of the product."
        404:
          description: "No products found for the specified category."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Produk dengan kategori ini tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Kesalahan saat mengambil data produk."
              error:
                type: string
                example: "Database connection failed."

  /ecommerce/products/search/:
    get:
      tags:
        - "e-commerce"
      summary: "Search products by keyword"
      description: "Retrieve a list of products that match the given search query."
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: query
          in: query
          required: true
          type: string
          description: "The search keyword to find matching products."
      responses:
        200:
          description: "A list of products matching the search query."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "The product ID."
                product_name:
                  type: string
                  description: "The name of the product."
                desc_product:
                  type: string
                  description: "A brief description of the product."
                img_product:
                  type: string
                  description: "URL of the product image."
                price:
                  type: integer
                  description: "The price of the product."
                stock:
                  type: integer
                  description: "The stock quantity of the product."
                sold:
                  type: integer
                  description: "The number of items sold."
                users_id:
                  type: integer
                  description: "The ID of the user who added the product."
                product_categories_id:
                  type: integer
                  description: "The category ID of the product."
        400:
          description: "Invalid or missing query parameter."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Parameter query tidak boleh kosong."
        404:
          description: "No products found for the search query."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Produk tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "error"
              message:
                type: string
                example: "Kesalahan saat mencari produk."
              error:
                type: string
                example: "Database connection failed."

  /ecommerce/products/new-product/:
    post:
      tags:
        - "e-commerce"
      summary: "Add a new product"
      description: "Endpoint to add a new product to the e-commerce system."
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: product_name
          in: formData
          required: true
          type: string
          description: "Name of the product."
        - name: desc_product
          in: formData
          required: true
          type: string
          description: "Description of the product."
        - name: price
          in: formData
          required: true
          type: integer
          description: "Price of the product."
        - name: stock
          in: formData
          required: true
          type: integer
          description: "Stock quantity of the product."
        - name: product_categories_id
          in: formData
          required: true
          type: string
          enum:
            - "1"
            - "2"
            - "3"
          description: "Category ID of the product. Options: 1 = mentah, 2 = olahan, 3 = lainnya."
        - name: img_product
          in: formData
          required: true
          type: file
          description: "Image file of the product."
      responses:
        200:
          description: "Product successfully added."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menambahkan produk"
              new_product:
                type: object
                properties:
                  id:
                    type: integer
                  product_name:
                    type: string
                  desc_product:
                    type: string
                  img_product:
                    type: string
                  price:
                    type: integer
                  stock:
                    type: integer
                  sold:
                    type: integer
                  users_id:
                    type: integer
                  product_categories_id:
                    type: integer
        400:
          description: "Missing required fields or validation failed."
        500:
          description: "Internal server error."

  /ecommerce/products/update-product/{product_id}/:
    put:
      tags:
        - "e-commerce"
      summary: "Update an existing product"
      description: "Endpoint to update an existing product by its ID."
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: product_id
          in: path
          required: true
          type: integer
          description: "ID of the product to update."
        - name: product_name
          in: formData
          required: false
          type: string
          description: "New name of the product."
        - name: desc_product
          in: formData
          required: false
          type: string
          description: "New description of the product."
        - name: price
          in: formData
          required: false
          type: integer
          description: "New price of the product."
        - name: stock
          in: formData
          required: false
          type: integer
          description: "New stock quantity of the product."
        - name: product_categories_id
          in: formData
          required: false
          type: string
          enum:
            - "1"
            - "2"
            - "3"
          description: "New category ID of the product. Options: 1 = mentah, 2 = olahan, 3 = lainnya."
        - name: img_product
          in: formData
          required: false
          type: file
          description: "New image file of the product."
      responses:
        200:
          description: "Product successfully updated."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Produk berhasil diperbarui"
              updated_product:
                type: object
                properties:
                  id:
                    type: integer
                  product_name:
                    type: string
                  desc_product:
                    type: string
                  img_product:
                    type: string
                  price:
                    type: integer
                  stock:
                    type: integer
                  sold:
                    type: integer
                  users_id:
                    type: integer
                  product_categories_id:
                    type: integer
        404:
          description: "Product not found."
        500:
          description: "Internal server error."

  /ecommerce/products/delete-product/{product_id}/:
    delete:
      tags:
        - "e-commerce"
      summary: "Delete a product"
      description: "Endpoint to delete an existing product by its ID."
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: product_id
          in: path
          required: true
          type: integer
          description: "ID of the product to delete."
      responses:
        200:
          description: "Product successfully deleted."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Produk berhasil dihapus"
        404:
          description: "Product not found."
        500:
          description: "Internal server error."

  /video-education/:
    get:
      tags:
        - "video education"
      summary: "Get all video education"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
      responses:
        200:
          description: "List of all video education."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: "The video ID."
                    title:
                      type: string
                      description: "The title of the video."
                    thumbnail:
                      type: string
                      description: "URL of the video thumbnail."
                    description:
                      type: string
                      description: "The description of the video."
                    link_yt:
                      type: string
                      description: "YouTube link of the video."
        404:
          description: "No video education found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Tidak ada video edukasi tersedia."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data video edukasi."
              error:
                type: string
                example: "Database connection failed."

  /video-education/{id}/:
    get:
      tags:
        - "video education"
      summary: "Get video education by ID"
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: id
          in: path
          required: true
          type: integer
          description: "The ID of the video to retrieve."
      responses:
        200:
          description: "Video education details."
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              data:
                type: object
                properties:
                  id:
                    type: integer
                    description: "The video ID."
                  title:
                    type: string
                    description: "The title of the video."
                  thumbnail:
                    type: string
                    description: "URL of the video thumbnail."
                  description:
                    type: string
                    description: "The description of the video."
                  link_yt:
                    type: string
                    description: "YouTube link of the video."
        404:
          description: "Video education not found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Video edukasi tidak ditemukan."
        500:
          description: "Internal server error."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Kesalahan saat mengambil data video edukasi."
              error:
                type: string
                example: "Database connection failed."

  /corn-disease-predict:
    post:
      tags:
        - "AI plant disease detection"
      summary: "Predict corn diseases from an uploaded image"
      description: "Endpoint to analyze an uploaded image and predict diseases affecting corn."
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: img_pred
          in: formData
          required: true
          type: file
          description: "Image file of the corn plant to be analyzed."
      responses:
        200:
          description: "Prediction successful."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menampilkan hasil prediksi penyakit"
              prediction:
                type: object
                properties:
                  id:
                    type: integer
                  dis_name:
                    type: string
                  dis_indo_name:
                    type: string
                  handling:
                    type: string
                  plant_types_id:
                    type: integer
                  description:
                    type: string
        400:
          description: "Image not found or invalid."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gambar tidak ditemukan."
        404:
          description: "Prediction failed or no matching disease found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal menampilkan hasil prediksi penyakit."

  /rice-disease-predict:
    post:
      tags:
        - "AI plant disease detection"
      summary: "Predict rice diseases from an uploaded image"
      description: "Endpoint to analyze an uploaded image and predict diseases affecting rice."
      consumes:
        - multipart/form-data
      parameters:
        - name: Authorization
          in: header
          required: true
          type: string
          description: "JWT token for authorization (e.g., 'Bearer <access_token>')."
        - name: img_pred
          in: formData
          required: true
          type: file
          description: "Image file of the rice plant to be analyzed."
      responses:
        200:
          description: "Prediction successful."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Sukses menampilkan hasil prediksi penyakit"
              prediction:
                type: object
                properties:
                  id:
                    type: integer
                  dis_name:
                    type: string
                  dis_indo_name:
                    type: string
                  handling:
                    type: string
                  plant_types_id:
                    type: integer
                  description:
                    type: string
        400:
          description: "Image not found or invalid."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gambar tidak ditemukan."
        404:
          description: "Prediction failed or no matching disease found."
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Gagal menampilkan hasil prediksi penyakit."

